
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce5  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000450  00000000  00000000  00001707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f3  00000000  00000000  00001b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d8  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000044  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "xstepper.h"
#include <util/delay.h>

void StepperStepCCWFull()
{
	__STEPPER_PORT = 0x05;
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x06;
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x0A;
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x09;
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x06;
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x02;
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x0A;
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x08;
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <StepperInit>:
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 60       	ori	r24, 0x0F	; 15
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x09;
  70:	87 bb       	out	0x17, r24	; 23
  72:	88 b3       	in	r24, 0x18	; 24
  74:	88 bb       	out	0x18, r24	; 24
  76:	08 95       	ret

00000078 <main>:
  78:	0e 94 36 00 	call	0x6c	; 0x6c <StepperInit>
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	95 e2       	ldi	r25, 0x25	; 37
  80:	0e 94 5a 00 	call	0xb4	; 0xb4 <USARTInit>
	//Initialize the usart
	USARTInit(9600); 
	
    while(1)
    {
        data=USARTReadChar();
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <USARTReadChar>
		
		if(data == 'f' || data == 'F')
  88:	86 36       	cpi	r24, 0x66	; 102
  8a:	11 f0       	breq	.+4      	; 0x90 <main+0x18>
  8c:	86 34       	cpi	r24, 0x46	; 70
  8e:	39 f4       	brne	.+14     	; 0x9e <main+0x26>
  90:	c8 e5       	ldi	r28, 0x58	; 88
  92:	d2 e0       	ldi	r29, 0x02	; 2
		
		{
			 for(uint16_t i=0;i<600;i++)
				 {
					 StepperStepCWSingle();     //Step Clock wise
  94:	0e 94 86 00 	call	0x10c	; 0x10c <StepperStepCWSingle>
  98:	21 97       	sbiw	r28, 0x01	; 1
        data=USARTReadChar();
		
		if(data == 'f' || data == 'F')
		
		{
			 for(uint16_t i=0;i<600;i++)
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x1c>
  9c:	f3 cf       	rjmp	.-26     	; 0x84 <main+0xc>
	         
				 }
		}
        
		
		else if(data == 'b' || data == 'B')
  9e:	82 36       	cpi	r24, 0x62	; 98
  a0:	11 f0       	breq	.+4      	; 0xa6 <main+0x2e>
  a2:	82 34       	cpi	r24, 0x42	; 66
  a4:	79 f7       	brne	.-34     	; 0x84 <main+0xc>
  a6:	c8 e5       	ldi	r28, 0x58	; 88
  a8:	d2 e0       	ldi	r29, 0x02	; 2
         {
			 for(uint16_t i=0;i<600;i++)
				 {
					 StepperStepCCWSingle();    //Step Counter Clock wise
  aa:	0e 94 65 00 	call	0xca	; 0xca <StepperStepCCWSingle>
  ae:	21 97       	sbiw	r28, 0x01	; 1
		}
        
		
		else if(data == 'b' || data == 'B')
         {
			 for(uint16_t i=0;i<600;i++)
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x32>
  b2:	e8 cf       	rjmp	.-48     	; 0x84 <main+0xc>

000000b4 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate
      
	UBRRL = ubrr_value;
  b4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr_value>>8);
  b6:	90 bd       	out	0x20, r25	; 32
   >> 1 StopBit
   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  b8:	86 e8       	ldi	r24, 0x86	; 134
  ba:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter
   UCSRB=(1<<RXEN)|(1<<TXEN);
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

000000c2 <USARTReadChar>:

char USARTReadChar()
{
	//Wait untill a data is available

	while(!(UCSRA & (1<<RXC)))
  c2:	5f 9b       	sbis	0x0b, 7	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <USARTReadChar>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
}
  c8:	08 95       	ret

000000ca <StepperStepCCWSingle>:
#include "xstepper.h"
#include <util/delay.h>

void StepperStepCCWSingle()
{  
	__STEPPER_PORT = 0x01;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <StepperStepCCWSingle+0x8>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <StepperStepCCWSingle+0xe>
  d8:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x04;
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	88 bb       	out	0x18, r24	; 24
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <StepperStepCCWSingle+0x18>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <StepperStepCCWSingle+0x1e>
  e8:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x02;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <StepperStepCCWSingle+0x28>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <StepperStepCCWSingle+0x2e>
  f8:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x08;
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <StepperStepCCWSingle+0x38>
 106:	00 c0       	rjmp	.+0      	; 0x108 <StepperStepCCWSingle+0x3e>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <StepperStepCWSingle>:
	
}

void StepperStepCWSingle()
{   
	__STEPPER_PORT = 0x08;
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	88 bb       	out	0x18, r24	; 24
 110:	89 ef       	ldi	r24, 0xF9	; 249
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <StepperStepCWSingle+0x8>
 118:	00 c0       	rjmp	.+0      	; 0x11a <StepperStepCWSingle+0xe>
 11a:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x02;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	88 bb       	out	0x18, r24	; 24
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <StepperStepCWSingle+0x18>
 128:	00 c0       	rjmp	.+0      	; 0x12a <StepperStepCWSingle+0x1e>
 12a:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x04;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	88 bb       	out	0x18, r24	; 24
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <StepperStepCWSingle+0x28>
 138:	00 c0       	rjmp	.+0      	; 0x13a <StepperStepCWSingle+0x2e>
 13a:	00 00       	nop
	_delay_ms(DELAY);
	__STEPPER_PORT = 0x01;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	88 bb       	out	0x18, r24	; 24
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <StepperStepCWSingle+0x38>
 148:	00 c0       	rjmp	.+0      	; 0x14a <StepperStepCWSingle+0x3e>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
